Callback in Updater function:
->how to change  state when it depends on the current value
2 cases:
 
 1.case:
  -> new state value depends on the old state  value  [to resolve this we use call backs]

  EXAMPLE:
    
     import { useState } from "react";
 function Counter()
{
    let [count,setCount]=useState(0);
    console.log("The counter is getting re-rendered")
    console.log("count ",count)
    
   let incCount=()=>{
    // console.log("inside the count function:",count)
    setCount(count+1) 
    setCount(count+1) // this count value depends  on the above count value 
    
   }

   return (
    <div>
        <h3> Count = {count}</h3>  ---> even though the setCount is written twice the value of the set count we will incresed only once i.e (if count=0 then next count = 1 not count =2 ) to overcome this we use call backs.
        <button onClick={incCount}>Increase count</button>
    </div>
   )
}
export default Counter;
--------------------------------------------------
case 2:
 -> new value does not depends on the old value
 setState(25);

-----------------------------------------------------------

 import { useState } from "react";
 function Counter()
{
    let [count,setCount]=useState(0);
    console.log("The counter is getting re-rendered")
    console.log("count ",count)
    
   let incCount=()=>{
    // console.log("inside the count function:",count)
    setCount((currCount)=>{
        return currCount+1
    })
    
        setCount((currCount)=>{
        return currCount+1
    })

    
   }

   return (
    <div>
        <h3> Count = {count}</h3>  --> now call back is used so count value will be incremented by 2
        <button onClick={incCount}>Increase count</button>
    </div>
   )
}
export default Counter;